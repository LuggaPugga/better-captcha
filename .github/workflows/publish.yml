name: Publish Package

on:
  workflow_dispatch:
    inputs:
      package:
        description: "Package to publish"
        required: true
        type: choice
        options:
          - core
          - react
          - solidjs
          - vue
          - qwik
          - svelte
          - lit
      dry_run:
        description: "Dry run - show what would be published without making changes"
        required: false
        type: boolean
        default: false

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.3.1

      - name: Install dependencies
        run: bun install

      - name: Get package info
        id: package_info
        run: |
          PACKAGE_PATH="packages/${{ github.event.inputs.package }}"
          PACKAGE_NAME=$(jq -r '.name' ${PACKAGE_PATH}/package.json)
          VERSION=$(jq -r '.version' ${PACKAGE_PATH}/package.json)
          echo "package_path=${PACKAGE_PATH}" >> $GITHUB_OUTPUT
          echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${PACKAGE_NAME}@${VERSION}" >> $GITHUB_OUTPUT

      - name: Check core dependency
        if: ${{ github.event.inputs.package != 'core' }}
        run: |
          CORE_VERSION=$(jq -r '.version' packages/core/package.json)

          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "DRY RUN: Would check if @better-captcha/core@${CORE_VERSION} exists on npm"
          else
            if ! npm view "@better-captcha/core@${CORE_VERSION}" version 2>/dev/null; then
              echo "ERROR: @better-captcha/core@${CORE_VERSION} is not published to npm yet"
              echo "Please publish core first before publishing framework packages"
              exit 1
            else
              echo "✓ @better-captcha/core@${CORE_VERSION} exists on npm"
            fi
          fi

      - name: Build core package
        if: ${{ github.event.inputs.package != 'core' }}
        run: |
          cd packages/core
          bun run build

      - name: Build selected package
        run: |
          cd ${{ steps.package_info.outputs.package_path }}
          bun run build

      - name: Check if version already exists
        id: version_check
        run: |
          PACKAGE_NAME="${{ steps.package_info.outputs.package_name }}"
          VERSION="${{ steps.package_info.outputs.version }}"

          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "DRY RUN: Would check if version ${VERSION} already exists on npm"
            echo "exists=false" >> $GITHUB_OUTPUT
          else
            if npm view "${PACKAGE_NAME}@${VERSION}" version 2>/dev/null; then
              echo "Version ${VERSION} already exists on npm"
              echo "exists=true" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "Version ${VERSION} does not exist, proceeding with publish"
              echo "exists=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Publish to npm
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          cd ${{ steps.package_info.outputs.package_path }}
          bun publish --access public
        env:
          NPM_CONFIG_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Generate changelog
        id: changelog
        uses: actions/github-script@v8
        with:
          script: |
            const pkg = "${{ github.event.inputs.package }}";
            const packageName = "${{ steps.package_info.outputs.package_name }}";
            const currentTag = "${{ steps.package_info.outputs.tag }}";
            
            // Determine relevant labels for this package
            const relevantLabels = ["core"];
            if (pkg !== "core") {
              relevantLabels.push(pkg);
            }
            
            core.info(`Generating changelog for ${pkg} with labels: ${relevantLabels.join(", ")}`);
            
            // Get previous tag
            const { execSync } = require("child_process");
            const previousTag = execSync(
              `git tag -l "${packageName}@*" | sort -V | tail -n 2 | head -n 1`,
              { encoding: "utf-8" }
            ).trim();
            
            core.info(`Previous tag: ${previousTag || "none"}`);
            
            // Get commit range
            const commitRange = previousTag 
              ? `${previousTag}..HEAD` 
              : "HEAD";
            
            // Get all merged PRs in the range
            const commits = execSync(
              `git log ${commitRange} --oneline --merges --grep="Merge pull request"`,
              { encoding: "utf-8" }
            ).trim().split("\n").filter(Boolean);

            // Extract PR numbers
            const prNumbers = commits
              .map(commit => {
                const match = commit.match(/#(\d+)/);
                return match ? parseInt(match[1]) : null;
              })
              .filter(Boolean);
            
            core.info(`Found ${prNumbers.length} PRs in commit range`);
            
            // Fetch PR details with labels
            const prDetails = await Promise.all(
              prNumbers.map(async (prNumber) => {
              try {
                  const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                    pull_number: prNumber,
                });
                  return pr;
                } catch (error) {
                  core.warning(`Failed to fetch PR #${prNumber}: ${error.message}`);
                  return null;
                }
              })
            );
            
            // Filter PRs by relevant labels
            const relevantPRs = prDetails.filter(pr => {
              if (!pr) return false;
              const prLabels = pr.labels.map(label => label.name);
              return prLabels.some(label => relevantLabels.includes(label));
            });
            
            core.info(`${relevantPRs.length} PRs match the relevant labels`);

            // Group PRs by category
            const categories = {
              core: { title: "🧱 Core", prs: [] },
              react: { title: "⚛️ React", prs: [] },
              vue: { title: "🧩 Vue", prs: [] },
              svelte: { title: "🔥 Svelte", prs: [] },
              solidjs: { title: "⚡ SolidJS", prs: [] },
              qwik: { title: "🌙 Qwik", prs: [] },
              lit: { title: "💡 Lit", prs: [] },
              other: { title: "📦 Other changes", prs: [] },
            };
            
            relevantPRs.forEach(pr => {
              const prLabels = pr.labels.map(label => label.name);
              let categorized = false;
              
              for (const label of prLabels) {
                if (categories[label]) {
                  categories[label].prs.push(pr);
                  categorized = true;
                  break;
                }
              }
              
              if (!categorized) {
                categories.other.prs.push(pr);
              }
            });
            
            // Build changelog
            let changelog = "";
            for (const [key, category] of Object.entries(categories)) {
              if (category.prs.length > 0) {
                changelog += `## ${category.title}\n\n`;
                category.prs.forEach(pr => {
                  changelog += `* ${pr.title} by @${pr.user.login} in #${pr.number}\n`;
                });
                changelog += "\n";
              }
            }
            
            // Add contributors section
            const contributors = [...new Set(relevantPRs.map(pr => pr.user.login))];
            if (contributors.length > 0) {
              changelog += `## 👥 Contributors\n\n`;
              contributors.forEach(username => {
                changelog += `* @${username}\n`;
              });
            }
            
            if (changelog === "") {
              changelog = "No changes for this release.";
            }

            core.setOutput("changelog", changelog);

      - name: Create Git tag
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          TAG="${{ steps.package_info.outputs.tag }}"

          # Check if tag already exists
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
            exit 1
          fi

          git tag "$TAG"
          git push origin "$TAG"

      - name: Create GitHub Release
        if: ${{ github.event.inputs.dry_run != 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.package_info.outputs.tag }}
          name: ${{ steps.package_info.outputs.package_name }} v${{ steps.package_info.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Summary
        run: |
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "## 🔍 Dry Run: Preview of Publication" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### What would be published:" >> $GITHUB_STEP_SUMMARY
            echo "- **Package**: \`${{ steps.package_info.outputs.package_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Version**: \`${{ steps.package_info.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Tag**: \`${{ steps.package_info.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Actions that would be performed:" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Build core package" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Build selected package" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Verify version doesn't exist on npm" >> $GITHUB_STEP_SUMMARY
            echo "- 📦 Publish to npm (skipped in dry run)" >> $GITHUB_STEP_SUMMARY
            echo "- 📝 Generate changelog (would include release notes)" >> $GITHUB_STEP_SUMMARY
            echo "- 🏷️ Create git tag (skipped in dry run)" >> $GITHUB_STEP_SUMMARY
            echo "- 🚀 Create GitHub release (skipped in dry run)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Changelog" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.changelog.outputs.changelog }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### To publish, run without the dry_run flag"
          else
            echo "## 🚀 Published ${{ steps.package_info.outputs.package_name }}@${{ steps.package_info.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Package Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Package**: \`${{ steps.package_info.outputs.package_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Version**: \`${{ steps.package_info.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **NPM**: https://www.npmjs.com/package/${{ steps.package_info.outputs.package_name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Release**: https://github.com/${{ github.repository }}/releases/tag/${{ steps.package_info.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Changelog" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.changelog.outputs.changelog }}" >> $GITHUB_STEP_SUMMARY
          fi