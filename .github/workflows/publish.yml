name: Publish Package

on:
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to publish'
        required: true
        type: choice
        options:
          - react
          - solidjs
          - vue
      dry_run:
        description: 'Dry run - show what would be published without making changes'
        required: false
        type: boolean
        default: false

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      actions:  write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.3.0

      - name: Install dependencies
        run: bun install

      - name: Get package info
        id: package_info
        run: |
          PACKAGE_PATH="packages/${{ github.event.inputs.package }}"
          PACKAGE_NAME=$(jq -r '.name' ${PACKAGE_PATH}/package.json)
          VERSION=$(jq -r '.version' ${PACKAGE_PATH}/package.json)
          echo "package_path=${PACKAGE_PATH}" >> $GITHUB_OUTPUT
          echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${PACKAGE_NAME}@${VERSION}" >> $GITHUB_OUTPUT

      - name: Build core package
        run: |
          cd packages/core
          bun run build

      - name: Build selected package
        run: |
          cd ${{ steps.package_info.outputs.package_path }}
          bun run build

      - name: Check if version already exists
        id: version_check
        run: |
          PACKAGE_NAME="${{ steps.package_info.outputs.package_name }}"
          VERSION="${{ steps.package_info.outputs.version }}"
          
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "DRY RUN: Would check if version ${VERSION} already exists on npm"
            echo "exists=false" >> $GITHUB_OUTPUT
          else
            if npm view "${PACKAGE_NAME}@${VERSION}" version 2>/dev/null; then
              echo "Version ${VERSION} already exists on npm"
              echo "exists=true" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "Version ${VERSION} does not exist, proceeding with publish"
              echo "exists=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Publish to npm
        run: |
          cd ${{ steps.package_info.outputs.package_path }}
          bun publish --access public
        env:
          NPM_CONFIG_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ !github.event.inputs.dry_run }}

      - name: Generate changelog
        id: changelog
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: context.repo.branch,
              tag_name: "${{ steps.package_info.outputs.tag }}",
              previous_tag_name: require('child_process').execSync(
                'git tag -l "${{ steps.package_info.outputs.package_name }}@*" | sort -V | tail -n 2 | head -n 1',
                { encoding: 'utf-8' }
              ).trim() || undefined,
              configuration_file_path: ".github/release-notes-config.json"
            });
            
            core.setOutput('changelog', data.body);

      - name: Create Git tag
        run: |
          TAG="${{ steps.package_info.outputs.tag }}"
          
          # Check if tag already exists
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
            exit 1
          fi
          
          git tag "$TAG"
          git push origin "$TAG"
        if: ${{ !github.event.inputs.dry_run }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.package_info.outputs.tag }}
          name: ${{ steps.package_info.outputs.package_name }} v${{ steps.package_info.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
        if: ${{ !github.event.inputs.dry_run }}

      - name: Summary
        run: |
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "## 🔍 Dry Run: Preview of Publication" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### What would be published:" >> $GITHUB_STEP_SUMMARY
            echo "- **Package**: \`${{ steps.package_info.outputs.package_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Version**: \`${{ steps.package_info.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Tag**: \`${{ steps.package_info.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Actions that would be performed:" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Build core package" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Build selected package" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Verify version doesn't exist on npm" >> $GITHUB_STEP_SUMMARY
            echo "- 📦 Publish to npm (skipped in dry run)" >> $GITHUB_STEP_SUMMARY
            echo "- 📝 Generate changelog (would include release notes)" >> $GITHUB_STEP_SUMMARY
            echo "- 🏷️ Create git tag (skipped in dry run)" >> $GITHUB_STEP_SUMMARY
            echo "- 🚀 Create GitHub release (skipped in dry run)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Changelog" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.changelog.outputs.changelog }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### To publish, run without the dry_run flag"
          else
            echo "## 🚀 Published ${{ steps.package_info.outputs.package_name }}@${{ steps.package_info.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Package Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Package**: \`${{ steps.package_info.outputs.package_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Version**: \`${{ steps.package_info.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **NPM**: https://www.npmjs.com/package/${{ steps.package_info.outputs.package_name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Release**: https://github.com/${{ github.repository }}/releases/tag/${{ steps.package_info.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Changelog" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.changelog.outputs.changelog }}" >> $GITHUB_STEP_SUMMARY
          fi