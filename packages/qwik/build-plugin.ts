import path from "node:path";
import { PROVIDER_REGISTRY, type ProviderMetadata } from "@better-captcha/core";
import { createUnplugin } from "unplugin";
import {
	generateProviderModule,
	generateProviderModuleDts,
	generateProviderAggregateModule,
	generateProviderAggregateModuleDts,
	type FrameworkConfig,
} from "@better-captcha/core/utils/build-plugin-utils";

const BASE_SPEC = "@better-captcha/qwik/base";

const PROVIDER_AGG_SPEC = "@better-captcha/qwik/provider";

const PROVIDER_SPEC_PREFIX = "@better-captcha/qwik/provider/";

function toPosix(p: string): string {
	return p.split(path.sep).join("/");
}

const qwikConfig: FrameworkConfig = {
	baseImport: `import { createCaptchaComponent } from "${BASE_SPEC}";`,
	componentCreation: (providerClassName: string) => {
		return `$((sitekey: string) => new ${providerClassName}(sitekey))`;
	},
	componentType: "Component",
	componentTypeImports: '{ Component } from "@builder.io/qwik"',
	fileExtension: ".js",
};

function genProviderModule(meta: ProviderMetadata): string {
	return `// Auto-generated from @better-captcha/core
// Do not edit this file directly

import { $ } from "@builder.io/qwik";
${qwikConfig.baseImport}
import { ${meta.providerClassName} } from "@better-captcha/core/providers/${meta.name}";

// Wrap provider creation into a QRL factory to satisfy Qwik serialization
const ${meta.componentName}Factory = ${qwikConfig.componentCreation(meta.providerClassName)};

export const ${meta.componentName} = createCaptchaComponent(${meta.componentName}Factory);
`;
}

function genProviderModuleDts(meta: ProviderMetadata): string {
	return generateProviderModuleDts(meta, qwikConfig);
}

function genProviderAggregateModule(): string {
	return generateProviderAggregateModule(PROVIDER_REGISTRY, PROVIDER_SPEC_PREFIX);
}

function genProviderAggregateModuleDts(): string {
	return generateProviderAggregateModuleDts(PROVIDER_REGISTRY, ".js");
}

export const unplugin = createUnplugin(() => {
	const baseAbs = toPosix(path.resolve(process.cwd(), "src/base-captcha.tsx"));

	return {
		name: "better-captcha-qwik",
		enforce: "pre",

		resolveId(id) {
			if (id === BASE_SPEC) return id;
			if (id === PROVIDER_AGG_SPEC) return id;
			if (id.startsWith(PROVIDER_SPEC_PREFIX)) return id;
			return null;
		},

		load(id) {
			if (id === BASE_SPEC) {
				return {
					code: `export { createCaptchaComponent } from "${baseAbs}";`,
					map: null,
				};
			}
			if (id === PROVIDER_AGG_SPEC) {
				return {
					code: genProviderAggregateModule(),
					map: null,
				};
			}
			if (id.startsWith(PROVIDER_SPEC_PREFIX)) {
				const name = id.slice(PROVIDER_SPEC_PREFIX.length);
				const meta = PROVIDER_REGISTRY.find((p) => p.name === name);
				if (!meta) return { code: "export {}", map: null };
				return {
					code: genProviderModule(meta),
					map: null,
				};
			}
			return null;
		},
	};
});

function genProviderModuleJs(meta: ProviderMetadata): string {
	return `// Auto-generated from @better-captcha/core
// Do not edit this file directly

import { $ } from "@builder.io/qwik";
import { createCaptchaComponent } from "../../base-captcha.qwik.mjs";
import { ${meta.providerClassName} } from "@better-captcha/core/providers/${meta.name}";

const ${meta.componentName}Factory = $(
    (sitekey) => new ${meta.providerClassName}(sitekey),
);

export const ${meta.componentName} = createCaptchaComponent(${meta.componentName}Factory);
`;
}

function genProviderModuleCjs(meta: ProviderMetadata): string {
	return `// Auto-generated from @better-captcha/core
// Do not edit this file directly

const { $ } = require("@builder.io/qwik");
const { createCaptchaComponent } = require("../../base-captcha.qwik.cjs");
const { ${meta.providerClassName} } = require("@better-captcha/core/providers/${meta.name}");

const ${meta.componentName}Factory = $(
    (sitekey) => new ${meta.providerClassName}(sitekey),
);

exports.${meta.componentName} = createCaptchaComponent(${meta.componentName}Factory);
`;
}

function genProviderAggregateModuleJs(): string {
	const lines = ["// Auto-generated from @better-captcha/core", "// Do not edit this file directly", ""];
	for (const m of PROVIDER_REGISTRY) {
		lines.push(`export { ${m.componentName} } from "./${m.name}/index.qwik.mjs";`);
	}
	return lines.join("\n");
}

function genProviderAggregateModuleCjs(): string {
	const lines = ["// Auto-generated from @better-captcha/core", "// Do not edit this file directly", ""];
	for (const m of PROVIDER_REGISTRY) {
		lines.push(`const { ${m.componentName}: _${m.componentName} } = require("./${m.name}/index.qwik.cjs");`);
		lines.push(`exports.${m.componentName} = _${m.componentName};`);
	}
	return lines.join("\n");
}

function genIndexDts(): string {
	return `// Auto-generated from @better-captcha/core
// Do not edit this file directly
import type { CaptchaHandle } from "@better-captcha/core";
import type { NoSerialize, QRL, Signal } from "@builder.io/qwik";

export type {
	CaptchaHandle,
	CaptchaState,
	Provider,
	ProviderConfig,
	WidgetId,
} from "@better-captcha/core";

/**
 * Props for CAPTCHA components
 * @template TOptions - Type of options specific to the CAPTCHA provider
 * @template THandle - Type of handle returned by the CAPTCHA provider
 */
export type CaptchaProps<TOptions, THandle extends CaptchaHandle = CaptchaHandle> = {
	sitekey: string;
	options?: TOptions;
	class?: string;
	style?: string | Record<string, string | number>;
	onReady$?: QRL<(handle: NoSerialize<THandle>) => unknown>;
	onError$?: QRL<(error: Error) => unknown>;
	controller?: { value: NoSerialize<THandle> | null } | null;
};

export { createCaptchaComponent } from "./base-captcha.qwik.mjs";

export type CaptchaController<THandle extends CaptchaHandle = CaptchaHandle> = Signal<NoSerialize<THandle> | null>;

/**
 * Creates a controller for managing CAPTCHA component instances
 * @template THandle - Type of handle returned by the CAPTCHA provider
 * @returns A signal that can be used to control the CAPTCHA component
 */
export function useCaptchaController<THandle extends CaptchaHandle = CaptchaHandle>(): CaptchaController<THandle>;
`;
}

function genBaseCaptchaDts(): string {
	return `// Auto-generated from @better-captcha/core
// Do not edit this file directly
import type { CaptchaHandle, Provider, ProviderConfig } from "@better-captcha/core";
import type { Component, NoSerialize, QRL } from "@builder.io/qwik";

export type CaptchaProps<TOptions, THandle extends CaptchaHandle> = {
	sitekey: string;
	options?: TOptions;
	class?: string;
	style?: string | Record<string, string>;
	controller?: { value: NoSerialize<THandle> | null } | null;
	onReady$?: QRL<(handle: NoSerialize<THandle>) => unknown>;
	onError$?: QRL<(error: Error) => unknown>;
};

export declare function createCaptchaComponent<
	TOptions = unknown,
	THandle extends CaptchaHandle = CaptchaHandle,
	TProvider extends Provider<ProviderConfig, TOptions, THandle> = Provider<ProviderConfig, TOptions, THandle>,
>(providerFactory$: QRL<(sitekey: string) => TProvider>): Component<CaptchaProps<TOptions, THandle>>;
`;
}

export const dtsEmitterPlugin = createUnplugin(() => {
	return {
		name: "better-captcha-dts-emitter",
		vite: {
			enforce: "post",
		},

		generateBundle() {
			this.emitFile({
				type: "asset",
				fileName: "index.d.ts",
				source: genIndexDts(),
			});

			this.emitFile({
				type: "asset",
				fileName: "base-captcha.d.ts",
				source: genBaseCaptchaDts(),
			});

			for (const provider of PROVIDER_REGISTRY) {
				this.emitFile({
					type: "asset",
					fileName: `provider/${provider.name}/index.qwik.mjs`,
					source: genProviderModuleJs(provider),
				});

				this.emitFile({
					type: "asset",
					fileName: `provider/${provider.name}/index.qwik.cjs`,
					source: genProviderModuleCjs(provider),
				});

				this.emitFile({
					type: "asset",
					fileName: `provider/${provider.name}/index.d.ts`,
					source: genProviderModuleDts(provider),
				});
			}

			this.emitFile({
				type: "asset",
				fileName: "provider/index.qwik.mjs",
				source: genProviderAggregateModuleJs(),
			});

			this.emitFile({
				type: "asset",
				fileName: "provider/index.qwik.cjs",
				source: genProviderAggregateModuleCjs(),
			});

			this.emitFile({
				type: "asset",
				fileName: "provider/index.d.ts",
				source: genProviderAggregateModuleDts(),
			});
		},
	};
});

export default unplugin;
