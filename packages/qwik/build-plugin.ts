import path from "node:path";
import { PROVIDER_REGISTRY, type ProviderMetadata } from "@better-captcha/core";
import { createUnplugin } from "unplugin";

const BASE_SPEC = "@better-captcha/qwik/base";

const PROVIDER_AGG_SPEC = "@better-captcha/qwik/provider";

const PROVIDER_SPEC_PREFIX = "@better-captcha/qwik/provider/";

function toPosix(p: string): string {
	return p.split(path.sep).join("/");
}

function genProviderModule(meta: ProviderMetadata): string {
	return `// Auto-generated from @better-captcha/core
// Do not edit this file directly

import { $ } from "@builder.io/qwik";
import { createCaptchaComponent } from "${BASE_SPEC}";
import { ${meta.providerClassName} } from "@better-captcha/core/providers/${meta.name}";

// Wrap provider creation into a QRL factory to satisfy Qwik serialization
const ${meta.componentName}Factory = $(
    (sitekey: string) => new ${meta.providerClassName}(sitekey),
);

export const ${meta.componentName} = createCaptchaComponent(${meta.componentName}Factory);
`;
}

function genProviderModuleDts(meta: ProviderMetadata): string {
	const { name, componentName, handleType, renderParamsType, renderParamsOmit, extraTypes } = meta;

	const extraTypeImports = extraTypes.length > 0 ? `,\n\t${extraTypes.join(",\n\t")}` : "";
	const extraTypeExports = extraTypes.length > 0 ? `, ${extraTypes.join(", ")}` : "";

	return `// Auto-generated from @better-captcha/core
// Do not edit this file directly
import type { Component } from "@builder.io/qwik";
import type { CaptchaProps } from "../../index.js";
import type {
	${handleType},
	${renderParamsType}${extraTypeImports},
} from "@better-captcha/core/providers/${name}";

export declare const ${componentName}: Component<CaptchaProps<Omit<${renderParamsType}, ${renderParamsOmit}>, ${handleType}>>;

export type { ${handleType}, ${renderParamsType}${extraTypeExports} };
`;
}

function genProviderAggregateModule(): string {
	const lines: string[] = ["// Auto-generated aggregator of providers"];
	for (const m of PROVIDER_REGISTRY) {
		lines.push(`export { ${m.componentName} } from "${PROVIDER_SPEC_PREFIX}${m.name}";`);
	}
	return lines.join("\n");
}

function genProviderAggregateModuleDts(): string {
	const lines = ["// Auto-generated from @better-captcha/core", "// Do not edit this file directly", ""];

	for (const metadata of PROVIDER_REGISTRY) {
		const { name, componentName, handleType, renderParamsType, extraTypes } = metadata;
		lines.push(`export { ${componentName} } from "./${name}/index.js";`);
		lines.push(`export type { ${handleType} } from "./${name}/index.js";`);
		lines.push(`export type { ${renderParamsType} as ${componentName}${renderParamsType} } from "./${name}/index.js";`);

		for (const extraType of extraTypes) {
			lines.push(`export type { ${extraType} as ${componentName}${extraType} } from "./${name}/index.js";`);
		}
	}

	return lines.join("\n");
}

export const unplugin = createUnplugin(() => {
	const baseAbs = toPosix(path.resolve(process.cwd(), "src/base-captcha.tsx"));

	return {
		name: "better-captcha-qwik",
		enforce: "pre",

		resolveId(id) {
			if (id === BASE_SPEC) return id;
			if (id === PROVIDER_AGG_SPEC) return id;
			if (id.startsWith(PROVIDER_SPEC_PREFIX)) return id;
			return null;
		},

		load(id) {
			if (id === BASE_SPEC) {
				return {
					code: `export { createCaptchaComponent } from "${baseAbs}";`,
					map: null,
				};
			}
			if (id === PROVIDER_AGG_SPEC) {
				return {
					code: genProviderAggregateModule(),
					map: null,
				};
			}
			if (id.startsWith(PROVIDER_SPEC_PREFIX)) {
				const name = id.slice(PROVIDER_SPEC_PREFIX.length);
				const meta = PROVIDER_REGISTRY.find((p) => p.name === name);
				if (!meta) return { code: "export {}", map: null };
				return {
					code: genProviderModule(meta),
					map: null,
				};
			}
			return null;
		},
	};
});

function genProviderModuleJs(meta: ProviderMetadata): string {
	return `// Auto-generated from @better-captcha/core
// Do not edit this file directly

import { $ } from "@builder.io/qwik";
import { createCaptchaComponent } from "../../base-captcha.qwik.mjs";
import { ${meta.providerClassName} } from "@better-captcha/core/providers/${meta.name}";

const ${meta.componentName}Factory = $(
    (sitekey) => new ${meta.providerClassName}(sitekey),
);

export const ${meta.componentName} = createCaptchaComponent(${meta.componentName}Factory);
`;
}

function genProviderModuleCjs(meta: ProviderMetadata): string {
	return `// Auto-generated from @better-captcha/core
// Do not edit this file directly

const { $ } = require("@builder.io/qwik");
const { createCaptchaComponent } = require("../../base-captcha.qwik.cjs");
const { ${meta.providerClassName} } = require("@better-captcha/core/providers/${meta.name}");

const ${meta.componentName}Factory = $(
    (sitekey) => new ${meta.providerClassName}(sitekey),
);

exports.${meta.componentName} = createCaptchaComponent(${meta.componentName}Factory);
`;
}

function genProviderAggregateModuleJs(): string {
	const lines = ["// Auto-generated from @better-captcha/core", "// Do not edit this file directly", ""];
	for (const m of PROVIDER_REGISTRY) {
		lines.push(`export { ${m.componentName} } from "./${m.name}/index.qwik.mjs";`);
	}
	return lines.join("\n");
}

function genProviderAggregateModuleCjs(): string {
	const lines = ["// Auto-generated from @better-captcha/core", "// Do not edit this file directly", ""];
	for (const m of PROVIDER_REGISTRY) {
		lines.push(`const { ${m.componentName}: _${m.componentName} } = require("./${m.name}/index.qwik.cjs");`);
		lines.push(`exports.${m.componentName} = _${m.componentName};`);
	}
	return lines.join("\n");
}

export const dtsEmitterPlugin = createUnplugin(() => {
	return {
		name: "better-captcha-dts-emitter",
		vite: {
			enforce: "post",

			generateBundle() {
				// Emit provider modules
				for (const provider of PROVIDER_REGISTRY) {
					// .mjs file
					this.emitFile({
						type: "asset",
						fileName: `provider/${provider.name}/index.qwik.mjs`,
						source: genProviderModuleJs(provider),
					});

					// .cjs file
					this.emitFile({
						type: "asset",
						fileName: `provider/${provider.name}/index.qwik.cjs`,
						source: genProviderModuleCjs(provider),
					});

					// .d.ts file
					this.emitFile({
						type: "asset",
						fileName: `provider/${provider.name}/index.d.ts`,
						source: genProviderModuleDts(provider),
					});
				}

				// Emit aggregate modules
				// .mjs file
				this.emitFile({
					type: "asset",
					fileName: "provider/index.qwik.mjs",
					source: genProviderAggregateModuleJs(),
				});

				// .cjs file
				this.emitFile({
					type: "asset",
					fileName: "provider/index.qwik.cjs",
					source: genProviderAggregateModuleCjs(),
				});

				// .d.ts file
				this.emitFile({
					type: "asset",
					fileName: "provider/index.d.ts",
					source: genProviderAggregateModuleDts(),
				});
			},
		},
	};
});

export default unplugin;
