import type { ProviderMetadata } from "../registry.js";

export interface FrameworkConfig {
	/** Import statement for the base component */
	baseImport: string;
	/** How to create the component (e.g., "createCaptchaComponent(providerClass)" or "createCaptchaComponent(providerFactory)") */
	componentCreation: (providerClassName: string) => string;
	/** Component type for TypeScript definitions */
	componentType: string;
	/** Additional imports needed for the component type */
	componentTypeImports?: string;
	/** File extension for generated components */
	fileExtension: string;
	/** Whether to use "use client" directive */
	useClientDirective?: boolean;
	/** Framework-specific props interface or type */
	propsType?: string;
}

export function generateProviderModule(meta: ProviderMetadata, config: FrameworkConfig): string {
	const lines = ["// Auto-generated from @better-captcha/core", "// Do not edit this file directly", ""];

	if (config.useClientDirective) {
		lines.push('"use client";');
		lines.push("");
	}

	lines.push(config.baseImport);
	lines.push(`import { ${meta.providerClassName} } from "@better-captcha/core/providers/${meta.name}";`);
	lines.push("");
	lines.push(`export const ${meta.componentName} = ${config.componentCreation(meta.providerClassName)};`);

	return lines.join("\n");
}

export function generateProviderModuleDts(meta: ProviderMetadata, config: FrameworkConfig): string {
	const { name, componentName, handleType, renderParamsType, renderParamsOmit, extraTypes } = meta;

	const extraTypeImports = extraTypes.length > 0 ? `,\n\t${extraTypes.join(",\n\t")}` : "";
	const extraTypeExports = extraTypes.length > 0 ? `, ${extraTypes.join(", ")}` : "";

	const componentTypeImports = config.componentTypeImports ? `import type ${config.componentTypeImports};` : "";

	return `// Auto-generated from @better-captcha/core
// Do not edit this file directly
${componentTypeImports}
import type { CaptchaProps } from "../../index.d.ts";
import type {
	${handleType},
	${renderParamsType}${extraTypeImports},
} from "@better-captcha/core/providers/${name}";

export declare const ${componentName}: ${config.componentType}<CaptchaProps<Omit<${renderParamsType}, ${renderParamsOmit}>, ${handleType}>>;

export type { ${handleType}, ${renderParamsType}${extraTypeExports} };
`;
}

export function generateProviderAggregateModule(providers: ProviderMetadata[], prefix: string): string {
	const lines: string[] = ["// Auto-generated aggregator of providers"];
	for (const m of providers) {
		lines.push(`export { ${m.componentName} } from "${prefix}${m.name}";`);
	}
	return lines.join("\n");
}

export function generateProviderAggregateModuleDts(
	providers: ProviderMetadata[],
	fileExtension: string = ".js",
): string {
	const lines = ["// Auto-generated from @better-captcha/core", "// Do not edit this file directly", ""];

	for (const metadata of providers) {
		const { name, componentName, handleType, renderParamsType, extraTypes } = metadata;
		lines.push(`export { ${componentName} } from "./${name}/index${fileExtension}";`);
		lines.push(`export type { ${handleType} } from "./${name}/index${fileExtension}";`);
		lines.push(
			`export type { ${renderParamsType} as ${componentName}${renderParamsType} } from "./${name}/index${fileExtension}";`,
		);

		for (const extraType of extraTypes) {
			lines.push(
				`export type { ${extraType} as ${componentName}${extraType} } from "./${name}/index${fileExtension}";`,
			);
		}
	}

	return lines.join("\n");
}

export function generateAggregateIndexFile(providers: ProviderMetadata[], fileExtension: string = ".js"): string {
	const lines = ["// Auto-generated from @better-captcha/core", "// Do not edit this file directly", ""];

	for (const metadata of providers) {
		const { name, componentName, handleType, renderParamsType, extraTypes } = metadata;
		lines.push(`export { ${componentName} } from "./${name}/index${fileExtension}";`);
		lines.push(`export type { ${handleType} } from "./${name}/index${fileExtension}";`);
		lines.push(
			`export type { ${renderParamsType} as ${componentName}${renderParamsType} } from "./${name}/index${fileExtension}";`,
		);

		for (const extraType of extraTypes) {
			lines.push(
				`export type { ${extraType} as ${componentName}${extraType} } from "./${name}/index${fileExtension}";`,
			);
		}
	}

	return lines.join("\n");
}
