import { PROVIDER_REGISTRY, type ProviderMetadata } from "@better-captcha/core";
import { type GeneratedFiles, generateAggregateIndexFile } from "@better-captcha/core/utils/build-plugin-utils";
import { ModuleKind, Project, ScriptTarget, VariableDeclarationKind } from "ts-morph";
import type { UnpluginFactory } from "unplugin";
import { createUnplugin } from "unplugin";

function createProject(): Project {
	return new Project({
		useInMemoryFileSystem: true,
		compilerOptions: {
			target: ScriptTarget.ESNext,
			module: ModuleKind.ESNext,
			declaration: true,
			esModuleInterop: true,
			skipLibCheck: true,
		},
	});
}

function generateComponentFiles(metadata: ProviderMetadata): GeneratedFiles {
	let elementName = metadata.name.endsWith("-captcha") ? metadata.name : `${metadata.name}-captcha`;

	if (elementName === "private-captcha") {
		elementName = "private-captcha-widget";
	}

	const project = createProject();
	const sourceFile = project.createSourceFile("component.ts", "", { overwrite: true });

	sourceFile.addImportDeclaration({
		namedImports: [metadata.useEndpoint ? "createCaptchaComponentWithEndpoint" : "createCaptchaComponent"],
		moduleSpecifier: "../../base-captcha.js",
	});

	sourceFile.addImportDeclaration({
		namedImports: [metadata.providerClassName],
		moduleSpecifier: `@better-captcha/core/providers/${metadata.name}`,
	});

	const createCall = metadata.useEndpoint
		? `createCaptchaComponentWithEndpoint(${metadata.providerClassName}, "${elementName}")`
		: `createCaptchaComponent(${metadata.providerClassName}, "${elementName}")`;

	sourceFile.addVariableStatement({
		declarationKind: VariableDeclarationKind.Const,
		isExported: true,
		declarations: [
			{
				name: metadata.componentName,
				initializer: createCall,
			},
		],
	});

	const emitResult = project.emitToMemory();
	const files = emitResult.getFiles();

	return {
		js: files.find((f) => f.filePath.endsWith(".js"))?.text || "",
		dts: files.find((f) => f.filePath.endsWith(".d.ts"))?.text || "",
	};
}

function generateComponentDts(metadata: ProviderMetadata): string {
	const { name, componentName, handleType, renderParamsType, extraTypes } = metadata;

	const extraTypeImports = extraTypes.length > 0 ? `,\n\t${extraTypes.join(",\n\t")}` : "";
	const extraTypeExports = extraTypes.length > 0 ? `, ${extraTypes.join(", ")}` : "";

	return `// Auto-generated from @better-captcha/core
// Do not edit this file directly
import type {
	${handleType},
	${renderParamsType}${extraTypeImports}
} from "@better-captcha/core/providers/${name}";

export declare const ${componentName}: CustomElementConstructor;
export type { ${handleType}, ${renderParamsType}${extraTypeExports} };
`;
}

export const unpluginFactory: UnpluginFactory<undefined> = () => {
	return {
		name: "better-captcha-generate-components",
		rollup: {
			generateBundle() {
				for (const provider of PROVIDER_REGISTRY) {
					const jsFiles = generateComponentFiles(provider);
					const dts = generateComponentDts(provider);

					this.emitFile({
						type: "asset",
						fileName: `provider/${provider.name}/index.js`,
						source: jsFiles.js,
					});

					this.emitFile({
						type: "asset",
						fileName: `provider/${provider.name}/index.d.ts`,
						source: dts,
					});
				}

				const aggregateFiles = generateAggregateIndexFile(PROVIDER_REGISTRY, ".js");

				this.emitFile({
					type: "asset",
					fileName: "provider/index.js",
					source: aggregateFiles.js,
				});

				this.emitFile({
					type: "asset",
					fileName: "provider/index.d.ts",
					source: aggregateFiles.dts,
				});
			},
		},
	};
};

export const unplugin = createUnplugin(unpluginFactory);
export default unplugin;
export const rollupPlugin = unplugin.rollup;
