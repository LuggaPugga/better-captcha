import { PROVIDER_REGISTRY, type ProviderMetadata } from "@better-captcha/core";
import {
	type FrameworkConfig,
	generateAggregateIndexFile,
	generateProviderModuleDts,
} from "@better-captcha/core/utils/build-plugin-utils";
import type { UnpluginFactory } from "unplugin";
import { createUnplugin } from "unplugin";

const litConfig: FrameworkConfig = {
	baseImport: `import { createCaptchaComponent } from "../../base-captcha.js";`,
	componentCreation: (providerClassName: string) => `createCaptchaComponent(${providerClassName})`,
	componentType: "typeof LitElement",
	componentTypeImports: '{ LitElement } from "lit"',
	fileExtension: ".js",
	useClientDirective: false,
};

function generateComponentFile(metadata: ProviderMetadata): string {
	const elementName = metadata.name.endsWith("captcha") ? metadata.name : `${metadata.name}-captcha`;

	const lines = ["// Auto-generated from @better-captcha/core", "// Do not edit this file directly", ""];

	lines.push(litConfig.baseImport);
	lines.push(`import { ${metadata.providerClassName} } from "@better-captcha/core/providers/${metadata.name}";`);
	lines.push("");
	lines.push(
		`export const ${metadata.componentName} = createCaptchaComponent(${metadata.providerClassName}, "${elementName}");`,
	);

	return lines.join("\n");
}

function generateComponentDts(metadata: ProviderMetadata): string {
	return generateProviderModuleDts(metadata, litConfig);
}

function generateLitAggregateIndexDts(providers: ProviderMetadata[]): string {
	return generateAggregateIndexFile(providers, ".js");
}

function generateLitAggregateIndexJs(providers: ProviderMetadata[]): string {
	const lines = ["// Auto-generated from @better-captcha/core", "// Do not edit this file directly", ""];
	for (const { name, componentName } of providers) {
		lines.push(`export { ${componentName} } from "./${name}/index.js";`);
	}
	return lines.join("\n");
}

export const unpluginFactory: UnpluginFactory<undefined> = () => {
	return {
		name: "better-captcha-generate-components",
		rollup: {
			generateBundle() {
				for (const provider of PROVIDER_REGISTRY) {
					this.emitFile({
						type: "asset",
						fileName: `provider/${provider.name}/index.js`,
						source: generateComponentFile(provider),
					});

					this.emitFile({
						type: "asset",
						fileName: `provider/${provider.name}/index.d.ts`,
						source: generateComponentDts(provider),
					});
				}

				this.emitFile({
					type: "asset",
					fileName: "provider/index.js",
					source: generateLitAggregateIndexJs(PROVIDER_REGISTRY),
				});

				this.emitFile({
					type: "asset",
					fileName: "provider/index.d.ts",
					source: generateLitAggregateIndexDts(PROVIDER_REGISTRY),
				});
			},
		},
	};
};

export const unplugin = createUnplugin(unpluginFactory);
export default unplugin;
export const rollupPlugin = unplugin.rollup;
