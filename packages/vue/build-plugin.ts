import { PROVIDER_REGISTRY, type ProviderMetadata } from "@better-captcha/core";
import { generateAggregateIndexFile, type GeneratedFiles } from "@better-captcha/core/utils/build-plugin-utils";
import { Project, ScriptTarget, ModuleKind, VariableDeclarationKind } from "ts-morph";
import type { UnpluginFactory } from "unplugin";
import { createUnplugin } from "unplugin";

function createProject(): Project {
	return new Project({
		useInMemoryFileSystem: true,
		compilerOptions: {
			target: ScriptTarget.ESNext,
			module: ModuleKind.ESNext,
			declaration: true,
			esModuleInterop: true,
			skipLibCheck: true,
		},
	});
}

function generateComponentFiles(metadata: ProviderMetadata): GeneratedFiles {
	const { name, componentName, providerClassName } = metadata;

	const project = createProject();
	const sourceFile = project.createSourceFile("component.ts", "", { overwrite: true });

	sourceFile.addImportDeclaration({
		namedImports: [metadata.useEndpoint ? "createCaptchaComponentWithEndpoint" : "createCaptchaComponent"],
		moduleSpecifier: "../../create-captcha-component.js",
	});

	sourceFile.addImportDeclaration({
		namedImports: [providerClassName],
		moduleSpecifier: `@better-captcha/core/providers/${name}`,
	});

	const initializer = metadata.useEndpoint
		? `createCaptchaComponentWithEndpoint(${providerClassName})`
		: `createCaptchaComponent(${providerClassName})`;

	sourceFile.addVariableStatement({
		declarationKind: VariableDeclarationKind.Const,
		isExported: true,
		declarations: [
			{
				name: componentName,
				initializer,
			},
		],
	});

	const emitResult = project.emitToMemory();
	const files = emitResult.getFiles();

	return {
		js: files.find((f) => f.filePath.endsWith(".js"))?.text || "",
		dts: files.find((f) => f.filePath.endsWith(".d.ts"))?.text || "",
	};
}

function generateComponentDts(metadata: ProviderMetadata): string {
	const { name, componentName, handleType, renderParamsType, renderParamsOmit, extraTypes, useEndpoint } = metadata;

	const extraTypeImports = extraTypes.length > 0 ? `,\n\t${extraTypes.join(",\n\t")}` : "";
	const extraTypeExports = extraTypes.length > 0 ? `, ${extraTypes.join(", ")}` : "";
	const propsType = useEndpoint ? "CaptchaPropsWithEndpoint" : "CaptchaProps";

	return `// Auto-generated from @better-captcha/core
// Do not edit this file directly
import type { DefineComponent } from "vue";
import type { ${propsType}, CaptchaEmits } from "../../index.js";
import type {
\t${handleType},
\t${renderParamsType}${extraTypeImports}
} from "@better-captcha/core/providers/${name}";

export declare const ${componentName}: DefineComponent<${propsType}<Omit<${renderParamsType}, ${renderParamsOmit}>>, CaptchaEmits<${handleType}>>;
export type { ${handleType}, ${renderParamsType}${extraTypeExports} };
`;
}

export const unpluginFactory: UnpluginFactory<undefined> = () => {
	const VIRTUAL_ID = "virtual:better-captcha-providers";
	const RESOLVED_VIRTUAL_ID = "\0better-captcha-providers";

	return {
		name: "better-captcha-generate-components",
		rollup: {
			resolveId(id) {
				return id === VIRTUAL_ID ? RESOLVED_VIRTUAL_ID : null;
			},
			load(id) {
				if (id === RESOLVED_VIRTUAL_ID) {
					return 'export * from "./provider/index.js";';
				}
				return null;
			},
			generateBundle() {
				for (const provider of PROVIDER_REGISTRY) {
					const jsFiles = generateComponentFiles(provider);
					const dts = generateComponentDts(provider);

					this.emitFile({
						type: "asset",
						fileName: `provider/${provider.name}/index.js`,
						source: jsFiles.js,
					});

					this.emitFile({
						type: "asset",
						fileName: `provider/${provider.name}/index.d.ts`,
						source: dts,
					});
				}

				const aggregateFiles = generateAggregateIndexFile(PROVIDER_REGISTRY, ".js");

				this.emitFile({
					type: "asset",
					fileName: "provider/index.js",
					source: aggregateFiles.js,
				});

				this.emitFile({
					type: "asset",
					fileName: "provider/index.d.ts",
					source: aggregateFiles.dts,
				});
			},
		},
	};
};

export const unplugin = createUnplugin(unpluginFactory);
export default unplugin;
export const rollupPlugin = unplugin.rollup;
