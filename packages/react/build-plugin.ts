import { PROVIDER_REGISTRY, type ProviderMetadata } from "@better-captcha/core";
import type { UnpluginFactory } from "unplugin";
import { createUnplugin } from "unplugin";

function generateComponentFile(metadata: ProviderMetadata): string {
	const { name, componentName, providerClassName } = metadata;

	return `// Auto-generated from @better-captcha/core
// Do not edit this file directly
"use client";

import { createCaptchaComponent } from "../../base-captcha.js";
import { ${providerClassName} } from "@better-captcha/core/providers/${name}";

export const ${componentName} = createCaptchaComponent(${providerClassName});
`;
}

function generateComponentDts(metadata: ProviderMetadata): string {
	const { name, componentName, handleType, renderParamsType, renderParamsOmit, extraTypes } = metadata;

	const extraTypeImports = extraTypes.length > 0 ? `,\n\t${extraTypes.join(",\n\t")}` : "";
	const extraTypeExports = extraTypes.length > 0 ? `, ${extraTypes.join(", ")}` : "";

	return `// Auto-generated from @better-captcha/core
// Do not edit this file directly
import type { ForwardRefExoticComponent, RefAttributes } from "react";
import type { CaptchaProps } from "../../index.js";
import type {
	${handleType},
	${renderParamsType}${extraTypeImports},
} from "@better-captcha/core/providers/${name}";

export declare const ${componentName}: ForwardRefExoticComponent<
	CaptchaProps<Omit<${renderParamsType}, ${renderParamsOmit}>> & RefAttributes<${handleType}>
>;

export type { ${handleType}, ${renderParamsType}${extraTypeExports} };
`;
}

function generateAggregateIndexFile(providers: ProviderMetadata[]): string {
	const lines = ["// Auto-generated from @better-captcha/core", "// Do not edit this file directly", ""];

	for (const metadata of providers) {
		const { name, componentName, handleType, renderParamsType, extraTypes } = metadata;
		lines.push(`export { ${componentName} } from "./${name}/index.js";`);
		lines.push(`export type { ${handleType} } from "./${name}/index.js";`);
		lines.push(`export type { ${renderParamsType} as ${componentName}${renderParamsType} } from "./${name}/index.js";`);

		for (const extraType of extraTypes) {
			lines.push(`export type { ${extraType} as ${componentName}${extraType} } from "./${name}/index.js";`);
		}
	}

	return lines.join("\n");
}

export const unpluginFactory: UnpluginFactory<undefined> = () => {
	return {
		name: "better-captcha-generate-components",
		rollup: {
			generateBundle() {
				for (const provider of PROVIDER_REGISTRY) {
					this.emitFile({
						type: "asset",
						fileName: `provider/${provider.name}/index.js`,
						source: generateComponentFile(provider),
					});

					this.emitFile({
						type: "asset",
						fileName: `provider/${provider.name}/index.d.ts`,
						source: generateComponentDts(provider),
					});
				}

				this.emitFile({
					type: "asset",
					fileName: "provider/index.js",
					source: generateAggregateIndexFile(PROVIDER_REGISTRY),
				});

				this.emitFile({
					type: "asset",
					fileName: "provider/index.d.ts",
					source: generateAggregateIndexFile(PROVIDER_REGISTRY),
				});
			},
		},
	};
};

export const unplugin = createUnplugin(unpluginFactory);
export default unplugin;
export const rollupPlugin = unplugin.rollup;
