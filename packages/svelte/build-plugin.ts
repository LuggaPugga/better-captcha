import fs from "node:fs";
import * as path from "node:path";
import { fileURLToPath } from "node:url";
import { PROVIDER_REGISTRY, type ProviderMetadata } from "@better-captcha/core";
import type { UnpluginFactory } from "unplugin";
import { createUnplugin } from "unplugin";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function generateSvelteComponent(metadata: ProviderMetadata): string {
	const { name, providerClassName, handleType, renderParamsType, renderParamsOmit } = metadata;

	return `<script lang="ts">
	import BaseCaptcha from "../../base-captcha.svelte";
	import { ${providerClassName} } from "@better-captcha/core/providers/${name}";
	import type { ${handleType}, ${renderParamsType} } from "@better-captcha/core/providers/${name}";
	import type { CaptchaState } from "@better-captcha/core";

	interface Props {
		sitekey: string;
		options?: Omit<${renderParamsType}, ${renderParamsOmit}>;
		class?: string;
		style?: string;
		onready?: (handle: ${handleType}) => void;
		onerror?: (error: Error) => void;
	}

	let {
		sitekey,
		options = undefined,
		class: className = undefined,
		style = undefined,
		onready = undefined,
		onerror = undefined
	}: Props = $props();

	let baseCaptchaRef: BaseCaptcha<Omit<${renderParamsType}, ${renderParamsOmit}>, ${handleType}, typeof ${providerClassName}> | undefined = $state(undefined);

	// Expose public methods
	export function execute(): Promise<void> {
		return baseCaptchaRef?.execute() ?? Promise.resolve();
	}

	export function reset(): void {
		baseCaptchaRef?.reset();
	}

	export function destroy(): void {
		baseCaptchaRef?.destroy();
	}

	export function getResponse(): string {
		return baseCaptchaRef?.getResponse() ?? "";
	}

	export function getComponentState(): CaptchaState {
		return baseCaptchaRef?.getComponentState() ?? { loading: false, error: null, ready: false };
	}
</script>

<BaseCaptcha
	bind:this={baseCaptchaRef}
	providerClass={${providerClassName}}
	{sitekey}
	{options}
	class={className}
	{style}
	{onready}
	{onerror}
/>
`;
}

function generateComponentDts(metadata: ProviderMetadata): string {
	const { name, componentName, handleType, renderParamsType, renderParamsOmit, extraTypes } = metadata;

	const extraTypeImports = extraTypes.length > 0 ? `,\n\t${extraTypes.join(",\n\t")}` : "";
	const extraTypeExports = extraTypes.length > 0 ? `, ${extraTypes.join(", ")}` : "";

	return `// Auto-generated from @better-captcha/core
// Do not edit this file directly
import type { SvelteComponent } from "svelte";
import type { CaptchaState } from "@better-captcha/core";
import type {
	${handleType},
	${renderParamsType}${extraTypeImports},
} from "@better-captcha/core/providers/${name}";

export interface ${componentName}Props {
	sitekey: string;
	options?: Omit<${renderParamsType}, ${renderParamsOmit}>;
	class?: string;
	style?: string;
	onready?: (handle: ${handleType}) => void;
	onerror?: (error: Error) => void;
}

/**
 * ${componentName} component for Svelte 5
 * 
 * @example
 * \`\`\`svelte
 * <script lang="ts">
 *   import ${componentName} from '@better-captcha/svelte/provider/${name}';
 *   import type { ${handleType} } from '@better-captcha/svelte/provider/${name}';
 * 
 *   let captchaRef: ${componentName} | undefined;
 * 
 *   function onReady(handle: ${handleType}) {
 *     console.log('CAPTCHA ready!', handle);
 *   }
 * 
 *   function onError(error: Error) {
 *     console.error('CAPTCHA error:', error);
 *   }
 * </script>
 * 
 * <${componentName}
 *   bind:this={captchaRef}
 *   sitekey="your-site-key"
 *   options={{ theme: 'light' }}
 *   onready={onReady}
 *   onerror={onError}
 * />
 * \`\`\`
 */
export default class ${componentName} extends SvelteComponent<${componentName}Props> {
	execute(): Promise<void>;
	reset(): void;
	destroy(): void;
	getResponse(): string;
	getComponentState(): CaptchaState;
}

export type { ${handleType}, ${renderParamsType}${extraTypeExports} };
`;
}

function generateComponentIndexJs(metadata: ProviderMetadata): string {
	const { componentName } = metadata;

	return `// Auto-generated from @better-captcha/core
// Do not edit this file directly

import ${componentName}Component from "./${componentName}.svelte";

export { ${componentName}Component as ${componentName} };
export default ${componentName}Component;
`;
}

function generateAggregateIndexJs(providers: ProviderMetadata[]): string {
	const lines = ["// Auto-generated from @better-captcha/core", "// Do not edit this file directly", ""];

	for (const { name, componentName } of providers) {
		lines.push(`export { ${componentName} } from "./${name}/index.js";`);
	}

	return lines.join("\n");
}

function generateAggregateIndexDts(providers: ProviderMetadata[]): string {
	const lines = ["// Auto-generated from @better-captcha/core", "// Do not edit this file directly", ""];

	for (const { name, componentName, handleType, renderParamsType, extraTypes } of providers) {
		lines.push(`export { default as ${componentName} } from "./${name}/index.js";`);
		lines.push(`export type { ${handleType} } from "./${name}/index.js";`);
		lines.push(`export type { ${renderParamsType} as ${componentName}${renderParamsType} } from "./${name}/index.js";`);

		for (const extraType of extraTypes) {
			lines.push(`export type { ${extraType} as ${componentName}${extraType} } from "./${name}/index.js";`);
		}
	}

	return lines.join("\n");
}

export const unpluginFactory: UnpluginFactory<undefined> = () => {
	const VIRTUAL_ID = "virtual:better-captcha-providers";
	const RESOLVED_VIRTUAL_ID = "\0better-captcha-providers";

	return {
		name: "better-captcha-generate-components",
		rollup: {
			resolveId(id) {
				return id === VIRTUAL_ID ? RESOLVED_VIRTUAL_ID : null;
			},
			load(id) {
				if (id === RESOLVED_VIRTUAL_ID) {
					return ["// Auto-generated virtual module", 'export * from "./provider/index.js";'].join("\n");
				}
				return null;
			},
			generateBundle() {
				// Copy base-captcha.svelte and its types to dist
				const baseCaptchaPath = path.join(__dirname, "src/base-captcha.svelte");
				const baseCaptchaDtsPath = path.join(__dirname, "src/base-captcha.svelte.d.ts");
				const baseCaptchaContent = fs.readFileSync(baseCaptchaPath, "utf-8");
				const baseCaptchaDtsContent = fs.readFileSync(baseCaptchaDtsPath, "utf-8");

				this.emitFile({
					type: "asset",
					fileName: "base-captcha.svelte",
					source: baseCaptchaContent,
				});

				this.emitFile({
					type: "asset",
					fileName: "base-captcha.svelte.d.ts",
					source: baseCaptchaDtsContent,
				});

				for (const provider of PROVIDER_REGISTRY) {
					// Generate .svelte component file
					this.emitFile({
						type: "asset",
						fileName: `provider/${provider.name}/${provider.componentName}.svelte`,
						source: generateSvelteComponent(provider),
					});

					// Generate index.js for the provider
					this.emitFile({
						type: "asset",
						fileName: `provider/${provider.name}/index.js`,
						source: generateComponentIndexJs(provider),
					});

					// Generate index.d.ts for the provider
					this.emitFile({
						type: "asset",
						fileName: `provider/${provider.name}/index.d.ts`,
						source: generateComponentDts(provider),
					});
				}

				// Generate aggregate index files
				this.emitFile({
					type: "asset",
					fileName: "provider/index.js",
					source: generateAggregateIndexJs(PROVIDER_REGISTRY),
				});

				this.emitFile({
					type: "asset",
					fileName: "provider/index.d.ts",
					source: generateAggregateIndexDts(PROVIDER_REGISTRY),
				});
			},
		},
	};
};

export const unplugin = createUnplugin(unpluginFactory);
export default unplugin;
export const rollupPlugin = unplugin.rollup;
