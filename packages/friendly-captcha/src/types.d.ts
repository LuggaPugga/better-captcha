/**
 * Represents the global Friendly Captcha SDK instance.
 * Accessible via `window.frcaptcha`.
 */
export interface FriendlyCaptchaSDK {
	/**
	 * Represents the state of a Friendly Captcha widget.
	 */
	state:
		| "init"
		| "reset"
		| "ready"
		| "started"
		| "validating"
		| "completed"
		| "expired"
		| "error"
		| "destroyed";

	/**
	 * Represents the structure of an error object returned by the widget.
	 */
	error?: {
		code: string;
		detail?: string;
	};

	/**
	 * The response token generated by the captcha.
	 * ".UNINITIALIZED", ".UNCONNECTED", ".RESET", ".DESTROYED", or the actual token.
	 */
	response: string;

	/**
	 * The unique ID of the widget instance.
	 */
	id: string;

	/**
	 * Returns the current state of the widget.
	 */
	getState(): FriendlyCaptchaSDK["state"];

	/**
	 * Returns the current response token of the widget.
	 */
	getResponse(): string;

	/**
	 * Returns the DOM element the widget is mounted under.
	 */
	getElement(): HTMLElement;

	/**
	 * Resets the widget to its initial state.
	 * @param options - Options for the reset.
	 */
	reset(options?: { trigger?: "root" | "widget" }): void;

	/**
	 * Destroys the widget, removing it from the DOM and cleaning up resources.
	 * Once destroyed, a widget cannot be reused.
	 */
	destroy(): void;

	/**
	 * Triggers the captcha challenge programmatically.
	 * This is typically used when `startMode` is set to 'programmatic'.
	 * @param trigger - The trigger type (e.g., "programmatic", "auto", "focus").
	 * @param data - Additional data related to the trigger, e.g., event object.
	 */
	trigger(
		trigger: "programmatic" | "auto" | "focus",
		data?: { ev?: Event },
	): void;

	/**
	 * Starts the captcha challenge. Alias for `trigger('programmatic')`.
	 */
	start(): void;

	/**
	 * Adds an event listener to the widget's root element.
	 * @param eventName - The name of the event to listen for (e.g., 'frc:widget.complete').
	 * @param listener - The event listener function.
	 * @param options - An object that specifies characteristics about the event listener.
	 */
	addEventListener<K extends keyof WidgetEventMap>(
		eventName: K,
		listener: (this: HTMLElement, ev: WidgetEventMap[K]) => any,
		options?: boolean | AddEventListenerOptions,
	): void;

	/**
	 * Removes an event listener from the widget's root element.
	 * @param eventName - The name of the event to remove.
	 * @param listener - The event listener function to remove.
	 * @param options - An object that specifies characteristics about the event listener.
	 */
	removeEventListener<K extends keyof WidgetEventMap>(
		eventName: K,
		listener: (this: HTMLElement, ev: WidgetEventMap[K]) => any,
		options?: boolean | EventListenerOptions,
	): void;

	/**
	 * Internal method to set the widget's state and dispatch events.
	 * @param stateInfo - Information about the new state.
	 * @private
	 */
	setState(stateInfo: {
		response: string;
		state: FriendlyCaptchaSDK["state"];
		error?: FriendlyCaptchaSDK["error"];
		resetTrigger?: "root" | "widget";
	}): void;
}

/**
 * Defines the detail property for custom widget events.
 */
export interface WidgetEventDetail {
	response: string;
	state: FriendlyCaptchaSDK["state"];
	id: string;
	error?: FriendlyCaptchaSDK["error"];
	trigger?: "root" | "widget"; // For reset event
}

/**
 * Maps event names to their CustomEvent types.
 */
export interface WidgetEventMap {
	"frc:widget.statechange": CustomEvent<WidgetEventDetail>;
	"frc:widget.complete": CustomEvent<WidgetEventDetail>;
	"frc:widget.expire": CustomEvent<WidgetEventDetail>;
	"frc:widget.error": CustomEvent<WidgetEventDetail>;
	"frc:widget.reset": CustomEvent<WidgetEventDetail>;
}

/**
 * Options for creating a Friendly Captcha widget.
 */
export interface RenderParameters {
	/** The HTML element to mount the widget under. */
	element: HTMLElement;
	/** Your sitekey from the Friendly Captcha dashboard. */
	sitekey: string;
	/** Optional: Custom name for the hidden input field that holds the response. Defaults to "frc-captcha-response". */
	formFieldName?: string | null;
	/** Optional: Custom API endpoint. Overrides the SDK's configured endpoint. */
	apiEndpoint?: string;
	/** Optional: Language for the widget (e.g., "en", "es", "fr"). Derived from `lang` attribute or `document.documentElement.lang` if not specified. */
	language?: string;
	/** Optional: Theme for the widget ("light", "dark", "auto"). */
	theme?: "light" | "dark" | "auto";
	/** Optional: When the widget should start processing ("focus", "auto", "programmatic"). Defaults to "focus". */
	startMode?: "focus" | "auto" | "programmatic";
}

/**
 * The global `frcaptcha` object provided by the Friendly Captcha SDK.
 */
export interface FrcaptchaGlobal {
	/**
	 * A promise that resolves when all initial widgets detected on `DOMContentLoaded`
	 * have been attached and registered. Resolves with an array of attached widget instances.
	 */
	attached: Promise<FriendlyCaptchaSDK[]>;

	/**
	 * Attaches Friendly Captcha widgets to elements in the DOM.
	 * If no elements are provided, it finds all elements with the class `frc-captcha`.
	 * @param elements - A single HTMLElement or a NodeList/array of HTMLElements to attach widgets to.
	 * @returns An array of newly created widget instances.
	 */
	attach(
		elements?: HTMLElement | NodeListOf<HTMLElement> | HTMLElement[],
	): FriendlyCaptchaSDK[];

	/**
	 * Creates and attaches a single Friendly Captcha widget instance.
	 * @param options - Options for creating the widget.
	 * @returns The newly created widget instance.
	 */
	createWidget(options: RenderParameters): FriendlyCaptchaSDK;

	/**
	 * Retrieves all currently active widget instances.
	 * @returns An array of all widget instances.
	 */
	getAllWidgets(): FriendlyCaptchaSDK[];

	/**
	 * Retrieves a specific widget instance by its unique ID.
	 * @param id - The ID of the widget to retrieve.
	 * @returns The widget instance, or `undefined` if not found.
	 */
	getWidgetById(id: string): FriendlyCaptchaSDK | undefined;

	/**
	 * Destroys all currently active widget and agent instances and cleans up resources.
	 */
	clear(): void;

	/**
	 * @private
	 * Internal property for tracking agent iframes.
	 */
	agents: Map<string, HTMLIFrameElement>;

	/**
	 * @private
	 * Internal property for tracking agent state (e.g., associated store).
	 */
	agentState: Map<string, any>; // Consider refining 'any' if details of agent state are known

	/**
	 * @private
	 * Internal property for tracking widget instances.
	 */
	widgets: Map<string, FriendlyCaptchaSDK>;

	/**
	 * @private
	 * Internal bus for communication between frames.
	 */
	bus: any; // Complex internal, may not need full typing unless extending it

	/**
	 * @private
	 * Internal signals object for collecting user behavior metrics.
	 */
	signals: any; // Complex internal, may not need full typing unless extending it

	/**
	 * @private
	 * The configured API endpoint.
	 */
	apiEndpoint?: string;

	/**
	 * @private
	 * Internal promise related to the 'attached' state.
	 */
	_attached: { promise: Promise<FriendlyCaptchaSDK[]>; resolve: Function };
}
